// Generated by gencpp from file icar_msgs/PreciseMoveFeedback.msg
// DO NOT EDIT!


#ifndef ICAR_MSGS_MESSAGE_PRECISEMOVEFEEDBACK_H
#define ICAR_MSGS_MESSAGE_PRECISEMOVEFEEDBACK_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace icar_msgs
{
template <class ContainerAllocator>
struct PreciseMoveFeedback_
{
  typedef PreciseMoveFeedback_<ContainerAllocator> Type;

  PreciseMoveFeedback_()
    : current_x(0.0)
    , current_y(0.0)
    , current_theta(0.0)  {
    }
  PreciseMoveFeedback_(const ContainerAllocator& _alloc)
    : current_x(0.0)
    , current_y(0.0)
    , current_theta(0.0)  {
  (void)_alloc;
    }



   typedef double _current_x_type;
  _current_x_type current_x;

   typedef double _current_y_type;
  _current_y_type current_y;

   typedef double _current_theta_type;
  _current_theta_type current_theta;





  typedef boost::shared_ptr< ::icar_msgs::PreciseMoveFeedback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::icar_msgs::PreciseMoveFeedback_<ContainerAllocator> const> ConstPtr;

}; // struct PreciseMoveFeedback_

typedef ::icar_msgs::PreciseMoveFeedback_<std::allocator<void> > PreciseMoveFeedback;

typedef boost::shared_ptr< ::icar_msgs::PreciseMoveFeedback > PreciseMoveFeedbackPtr;
typedef boost::shared_ptr< ::icar_msgs::PreciseMoveFeedback const> PreciseMoveFeedbackConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::icar_msgs::PreciseMoveFeedback_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::icar_msgs::PreciseMoveFeedback_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::icar_msgs::PreciseMoveFeedback_<ContainerAllocator1> & lhs, const ::icar_msgs::PreciseMoveFeedback_<ContainerAllocator2> & rhs)
{
  return lhs.current_x == rhs.current_x &&
    lhs.current_y == rhs.current_y &&
    lhs.current_theta == rhs.current_theta;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::icar_msgs::PreciseMoveFeedback_<ContainerAllocator1> & lhs, const ::icar_msgs::PreciseMoveFeedback_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace icar_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::icar_msgs::PreciseMoveFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::icar_msgs::PreciseMoveFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::icar_msgs::PreciseMoveFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::icar_msgs::PreciseMoveFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::icar_msgs::PreciseMoveFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::icar_msgs::PreciseMoveFeedback_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::icar_msgs::PreciseMoveFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "135d5d86c0e48dabb265bb68e2f58746";
  }

  static const char* value(const ::icar_msgs::PreciseMoveFeedback_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x135d5d86c0e48dabULL;
  static const uint64_t static_value2 = 0xb265bb68e2f58746ULL;
};

template<class ContainerAllocator>
struct DataType< ::icar_msgs::PreciseMoveFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "icar_msgs/PreciseMoveFeedback";
  }

  static const char* value(const ::icar_msgs::PreciseMoveFeedback_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::icar_msgs::PreciseMoveFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"#define the feedback\n"
"float64 current_x\n"
"float64 current_y\n"
"float64 current_theta\n"
;
  }

  static const char* value(const ::icar_msgs::PreciseMoveFeedback_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::icar_msgs::PreciseMoveFeedback_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.current_x);
      stream.next(m.current_y);
      stream.next(m.current_theta);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PreciseMoveFeedback_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::icar_msgs::PreciseMoveFeedback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::icar_msgs::PreciseMoveFeedback_<ContainerAllocator>& v)
  {
    s << indent << "current_x: ";
    Printer<double>::stream(s, indent + "  ", v.current_x);
    s << indent << "current_y: ";
    Printer<double>::stream(s, indent + "  ", v.current_y);
    s << indent << "current_theta: ";
    Printer<double>::stream(s, indent + "  ", v.current_theta);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ICAR_MSGS_MESSAGE_PRECISEMOVEFEEDBACK_H
