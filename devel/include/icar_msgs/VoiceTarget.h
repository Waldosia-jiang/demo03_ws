// Generated by gencpp from file icar_msgs/VoiceTarget.msg
// DO NOT EDIT!


#ifndef ICAR_MSGS_MESSAGE_VOICETARGET_H
#define ICAR_MSGS_MESSAGE_VOICETARGET_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace icar_msgs
{
template <class ContainerAllocator>
struct VoiceTarget_
{
  typedef VoiceTarget_<ContainerAllocator> Type;

  VoiceTarget_()
    : position_name()
    , target_name()  {
    }
  VoiceTarget_(const ContainerAllocator& _alloc)
    : position_name(_alloc)
    , target_name(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _position_name_type;
  _position_name_type position_name;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _target_name_type;
  _target_name_type target_name;





  typedef boost::shared_ptr< ::icar_msgs::VoiceTarget_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::icar_msgs::VoiceTarget_<ContainerAllocator> const> ConstPtr;

}; // struct VoiceTarget_

typedef ::icar_msgs::VoiceTarget_<std::allocator<void> > VoiceTarget;

typedef boost::shared_ptr< ::icar_msgs::VoiceTarget > VoiceTargetPtr;
typedef boost::shared_ptr< ::icar_msgs::VoiceTarget const> VoiceTargetConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::icar_msgs::VoiceTarget_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::icar_msgs::VoiceTarget_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::icar_msgs::VoiceTarget_<ContainerAllocator1> & lhs, const ::icar_msgs::VoiceTarget_<ContainerAllocator2> & rhs)
{
  return lhs.position_name == rhs.position_name &&
    lhs.target_name == rhs.target_name;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::icar_msgs::VoiceTarget_<ContainerAllocator1> & lhs, const ::icar_msgs::VoiceTarget_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace icar_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::icar_msgs::VoiceTarget_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::icar_msgs::VoiceTarget_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::icar_msgs::VoiceTarget_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::icar_msgs::VoiceTarget_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::icar_msgs::VoiceTarget_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::icar_msgs::VoiceTarget_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::icar_msgs::VoiceTarget_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7962b51ba94b1a7112e7fe8ad9a28333";
  }

  static const char* value(const ::icar_msgs::VoiceTarget_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7962b51ba94b1a71ULL;
  static const uint64_t static_value2 = 0x12e7fe8ad9a28333ULL;
};

template<class ContainerAllocator>
struct DataType< ::icar_msgs::VoiceTarget_<ContainerAllocator> >
{
  static const char* value()
  {
    return "icar_msgs/VoiceTarget";
  }

  static const char* value(const ::icar_msgs::VoiceTarget_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::icar_msgs::VoiceTarget_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string position_name\n"
"string target_name\n"
;
  }

  static const char* value(const ::icar_msgs::VoiceTarget_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::icar_msgs::VoiceTarget_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.position_name);
      stream.next(m.target_name);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct VoiceTarget_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::icar_msgs::VoiceTarget_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::icar_msgs::VoiceTarget_<ContainerAllocator>& v)
  {
    s << indent << "position_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.position_name);
    s << indent << "target_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.target_name);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ICAR_MSGS_MESSAGE_VOICETARGET_H
