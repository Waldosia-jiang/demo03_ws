// Generated by gencpp from file icar_msgs/PreciseMoveGoal.msg
// DO NOT EDIT!


#ifndef ICAR_MSGS_MESSAGE_PRECISEMOVEGOAL_H
#define ICAR_MSGS_MESSAGE_PRECISEMOVEGOAL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace icar_msgs
{
template <class ContainerAllocator>
struct PreciseMoveGoal_
{
  typedef PreciseMoveGoal_<ContainerAllocator> Type;

  PreciseMoveGoal_()
    : type(0)
    , start_x(0.0)
    , start_y(0.0)
    , start_theta(0.0)
    , goal_x(0.0)
    , goal_y(0.0)
    , goal_theta(0.0)  {
    }
  PreciseMoveGoal_(const ContainerAllocator& _alloc)
    : type(0)
    , start_x(0.0)
    , start_y(0.0)
    , start_theta(0.0)
    , goal_x(0.0)
    , goal_y(0.0)
    , goal_theta(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _type_type;
  _type_type type;

   typedef double _start_x_type;
  _start_x_type start_x;

   typedef double _start_y_type;
  _start_y_type start_y;

   typedef double _start_theta_type;
  _start_theta_type start_theta;

   typedef double _goal_x_type;
  _goal_x_type goal_x;

   typedef double _goal_y_type;
  _goal_y_type goal_y;

   typedef double _goal_theta_type;
  _goal_theta_type goal_theta;





  typedef boost::shared_ptr< ::icar_msgs::PreciseMoveGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::icar_msgs::PreciseMoveGoal_<ContainerAllocator> const> ConstPtr;

}; // struct PreciseMoveGoal_

typedef ::icar_msgs::PreciseMoveGoal_<std::allocator<void> > PreciseMoveGoal;

typedef boost::shared_ptr< ::icar_msgs::PreciseMoveGoal > PreciseMoveGoalPtr;
typedef boost::shared_ptr< ::icar_msgs::PreciseMoveGoal const> PreciseMoveGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::icar_msgs::PreciseMoveGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::icar_msgs::PreciseMoveGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::icar_msgs::PreciseMoveGoal_<ContainerAllocator1> & lhs, const ::icar_msgs::PreciseMoveGoal_<ContainerAllocator2> & rhs)
{
  return lhs.type == rhs.type &&
    lhs.start_x == rhs.start_x &&
    lhs.start_y == rhs.start_y &&
    lhs.start_theta == rhs.start_theta &&
    lhs.goal_x == rhs.goal_x &&
    lhs.goal_y == rhs.goal_y &&
    lhs.goal_theta == rhs.goal_theta;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::icar_msgs::PreciseMoveGoal_<ContainerAllocator1> & lhs, const ::icar_msgs::PreciseMoveGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace icar_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::icar_msgs::PreciseMoveGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::icar_msgs::PreciseMoveGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::icar_msgs::PreciseMoveGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::icar_msgs::PreciseMoveGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::icar_msgs::PreciseMoveGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::icar_msgs::PreciseMoveGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::icar_msgs::PreciseMoveGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a1ab3d2c84585a7413ba2a70ea4cd8ad";
  }

  static const char* value(const ::icar_msgs::PreciseMoveGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa1ab3d2c84585a74ULL;
  static const uint64_t static_value2 = 0x13ba2a70ea4cd8adULL;
};

template<class ContainerAllocator>
struct DataType< ::icar_msgs::PreciseMoveGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "icar_msgs/PreciseMoveGoal";
  }

  static const char* value(const ::icar_msgs::PreciseMoveGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::icar_msgs::PreciseMoveGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# Define the goal\n"
"# if type is 0,then spin. if type is 1, then move. \n"
"char type\n"
"float64 start_x\n"
"float64 start_y\n"
"float64 start_theta\n"
"float64 goal_x\n"
"float64 goal_y\n"
"float64 goal_theta\n"
;
  }

  static const char* value(const ::icar_msgs::PreciseMoveGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::icar_msgs::PreciseMoveGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.type);
      stream.next(m.start_x);
      stream.next(m.start_y);
      stream.next(m.start_theta);
      stream.next(m.goal_x);
      stream.next(m.goal_y);
      stream.next(m.goal_theta);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PreciseMoveGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::icar_msgs::PreciseMoveGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::icar_msgs::PreciseMoveGoal_<ContainerAllocator>& v)
  {
    s << indent << "type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.type);
    s << indent << "start_x: ";
    Printer<double>::stream(s, indent + "  ", v.start_x);
    s << indent << "start_y: ";
    Printer<double>::stream(s, indent + "  ", v.start_y);
    s << indent << "start_theta: ";
    Printer<double>::stream(s, indent + "  ", v.start_theta);
    s << indent << "goal_x: ";
    Printer<double>::stream(s, indent + "  ", v.goal_x);
    s << indent << "goal_y: ";
    Printer<double>::stream(s, indent + "  ", v.goal_y);
    s << indent << "goal_theta: ";
    Printer<double>::stream(s, indent + "  ", v.goal_theta);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ICAR_MSGS_MESSAGE_PRECISEMOVEGOAL_H
